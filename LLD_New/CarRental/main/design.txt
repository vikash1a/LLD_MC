design  
    vechicles - id,name, vehicleType,locationId,VehicleStatus
    vehicleStatus (enum)- available, booked,maintenance,inuse
    Users - id,name,email, mobileNumber,userType
    usertType - admin,user,driver
    Booking - userId,vehicleId,payment,List<services>,startTime, endTime,status,driverId,paymentid
    Status (enum) - Booked,Cancelled,Picked,returned
    vehicletype (enum)
    location - latitiude, longitude, state
    payment - mode,amount,detetime,status,invoice
    qrcodeMapping - qrcode,vehicleId
    services enum - AC, music device,driver

    registerUser
        input - user, ouptut - userID
    bookvehicle
        input - userId, vehicleId 
        output - bookingId
    addVehicle (by admin)
        input - vehicle
        output - vehicleId

improvement
    vehicle - capacity,cost/hr
    addonservice cost
    payment done check

Problem Statement
    Using OO principles to design a cab rental application - I am going to use Java

    Users should be able to create an account for them to book vehicles of the below types.
    Admin should be able to add vehicle to inventory.
    Users should be able to book an available vehicle.
    Users should be able to scan qrCode of the vehicle and book (walkin booking).
    Users can pick booked vehicle from the available from the designated places.
    Users should be able to cancel the booking.
    Users should be able to return the vehicle post usage.
    Users get invoice for payment post returning the vehicle.
    Users Should get remainder notification a day before their booking.
    Users should be able to choose and add devices and services to the vehicles while they book.

    System should be provide APIs to search for vechicles booked by users by user id and for a particular interval.

revision 
    user
        registerUser(User)=>userId
        searchCar (carType,startTime,endTime) =>List<Car>
        bookCar (userId,driverId,carType,startTime,endTime,List<AddOn>) => status
        doPayment (bookingId, paymentAmount, paymentMethod) => status
        cancelBooking (bookingId)=>status
        updateBooking (bookingId,carType,startTime,endTime,List<AddOn>)=>status
        getBooking (userId)=>List<Booking>
    Driver
        updateAvailability (driverId,availability)=>status
        updateLocaiton (driverId,location)=>status
    
    Model
        User -  name, email, address, phone
        Customer : User 
        Driver : User - location, carId, driverStatus(available,booked,notAvailable)
        Booking - userId, driverId, startTime, endTime, paymentId, paymentStatus, bookingStatus(booked,Completed,Cancelled)
        payment - Amount ,Mode,datetime, transactionNo
        location - lat,long
        Car - name, carType (small,medium,Large), capacity, PricePerKm



